from .constants import ComparisonMode as ComparisonMode, DefaultValue as DefaultValue, TraitKind as TraitKind
from .ctrait import CTrait as CTrait
from .trait_base import SequenceTypes as SequenceTypes, TypeTypes as TypeTypes, add_article as add_article
from .trait_converters import trait_cast as trait_cast
from .trait_errors import TraitError as TraitError
from .trait_factory import TraitFactory as TraitFactory
from .trait_handler import TraitHandler as TraitHandler
from .trait_handlers import TraitCastType as TraitCastType, TraitCoerceType as TraitCoerceType, TraitCompound as TraitCompound, TraitEnum as TraitEnum, TraitFunction as TraitFunction, TraitInstance as TraitInstance, TraitMap as TraitMap
from typing import Any, Optional

NoneType: Any
ConstantTypes: Any
PythonTypes: Any
CallableTypes: Any
TraitTypes: Any
DefaultValues: Any

def __newobj__(cls, *args: Any): ...

class _InstanceArgs:
    args: Any = ...
    kw: Any = ...
    def __init__(self, factory: Any, args: Any, kw: Any) -> None: ...

class Default:
    default_value: Any = ...
    def __init__(self, func: Optional[Any] = ..., args: Any = ..., kw: Optional[Any] = ...) -> None: ...

def Trait(*value_type: Any, **metadata: Any): ...

class _TraitMaker:
    type_map: Any = ...
    def __init__(self, *value_type: Any, **metadata: Any) -> None: ...
    handler: Any = ...
    clone: Any = ...
    default_value_type: Any = ...
    default_value: Any = ...
    metadata: Any = ...
    def define(self, *value_type: Any, **metadata: Any) -> None: ...
    def do_list(self, list: Any, enum: Any, map: Any, other: Any) -> None: ...
    def as_ctrait(self): ...

def Property(fget: Optional[Any] = ..., fset: Optional[Any] = ..., fvalidate: Optional[Any] = ..., force: bool = ..., handler: Optional[Any] = ..., trait: Optional[Any] = ..., **metadata: Any): ...

Property: Any

class ForwardProperty:
    metadata: Any = ...
    validate: Any = ...
    handler: Any = ...
    def __init__(self, metadata: Any, validate: Optional[Any] = ..., handler: Optional[Any] = ...) -> None: ...

generic_trait: Any

def Color(*args: Any, **metadata: Any): ...

Color: Any

def RGBColor(*args: Any, **metadata: Any): ...

RGBColor: Any

def Font(*args: Any, **metadata: Any): ...

Font: Any
